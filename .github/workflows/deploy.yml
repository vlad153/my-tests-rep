name: deploy-app

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

  workflow_dispatch:
    inputs:
      version:
        default: latest
        description: Tag of release
        type: string

env:
  REGISTRY: ghcr.io
  POETRY_VERSION: 1.7.1
  VERSION: ${{ inputs.version || 'latest' }}

jobs:

  build_and_push_to_registry:
    name: "build image and push"

    runs-on: ubuntu-latest

    steps:

      # Checkout latest or specific tag
      -
        name: show version
        run: |
          echo $VERSION

      -
        name: checkout
        if: ${{ env.VERSION == '' || env.VERSION == 'latest' }}
        uses: actions/checkout@v4

      -
        name: checkout tag
        if: ${{ env.VERSION != '' && env.VERSION != 'latest' }}
        uses: actions/checkout@v4
        with:
          ref: ref/tags/${{ env.VERSION }}

      # Assign environment variables used in subsequent steps
      -
        name: Env variable assignment
        run: |
          echo "IMAGE_REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # TAG_NAME default to 'latest' if not a release or manual deployment
      -
        name: Assign version
        run: |
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ env.VERSION }}" != "" ]; then
            echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_ENV
          fi;

      # Work with docker
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to container registry
      -
        name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push new docker image, skip for manual
      # redeploy other than 'latest'
      -
        name: Build and push docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        if: ${{ env.VERSION }} == '' || ${{ env.VERSION }} == 'latest' }}
        with:
          build-args: |
            POETRY_VERSION=${{ env.POETRY_VERSION }}
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:${{ env.TAG_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: "deploy backend"
    needs: build_and_push_to_registry
    runs-on: ubuntu-latest

    env:
      REMOTE_WORK_DIR: "~/projects/test-app"

    steps:
      -
        name: checkout
        if: ${{ env.VERSION == '' || env.VERSION == 'latest' }}
        uses: actions/checkout@v4
      -
        name: checkout tag
        if: ${{ env.VERSION != '' && env.VERSION != 'latest' }}
        uses: actions/checkout@v4
        with:
          ref: ref/tags/${{ env.VERSION }}
      -
        name: Env variable assignment
        run: |
          echo "IMAGE_REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ env.VERSION }}" != "" ]; then
            echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_ENV
          fi;
      -
        name: Create .env file
        run: |
          echo "${{ secrets.PASS_PHRASE }}"
          echo "${{ vars.PUBLIC_VARIABLES }}" 
          echo "Generate .env file"
          echo "${{ vars.PUBLIC_VARIABLES }}" >> .env
          echo "${{ secrets.PRIVATE_VARIABLES }}" >> .env
          echo "IMAGE_REPO=${{ env.IMAGE_REPOSITORY_NAME }}" >> .env
          echo "RELEASE_VERSION=${{ env.TAG_NAME }}" >> .env
          echo "APP_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY_NAME }}:${{ env.TAG_NAME }}" >> .env
      -
        name: Copy compose and .env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          passphrase: ${{ secrets.PASS_PHRASE }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          source: "./docker/docker-compose.prod-image.yml,./.env,./scripts/docker_prod.sh"
          target: ${{ env.REMOTE_WORK_DIR }}
      -
        name: Remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME_DOCKER: ${{ github.actor }}
          REGISTRY: ${{ env.REGISTRY }}

        with:
          host: ${{ secrets.HOST }}
          passphrase: ${{ secrets.PASS_PHRASE }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: APP_TOKEN,USERNAME_DOCKER,REGISTRY
          script: |
            cd ${{env.REMOTE_WORK_DIR }}
            echo $APP_TOKEN | docker login $REGISTRY -u $USERNAME_DOCKER --password-stdin
            sh ./scripts/docker_prod.sh
